library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity dataMem is
	port(
		clk 		: IN std_logic;
		wrEn 		: IN std_logic;
		wrAddr 		: IN std_logic_vector(4 downto 0);
		rdAddrA 	: IN std_logic_vector(4 downto 0);
		rdAddrB 	: IN std_logic_vector(4 downto 0);
		wrData 		: IN std_logic_vector(31 downto 0);
		rdDataA 	: OUT std_logic_vector(31 downto 0);
		rdDataB 	: OUT std_logic_vector(31 downto 0)
		);
end dataMem;

architecture behav of dataMem is
	type memArray is array(0 to 31) of std_logic_vector(31 downto 0);

	signal regMem 	: memArray :=
	(
		(others => '0'), (others => '0'), (others => '0'), (others => '0'), (others => '0'), 
		(others => '0'), (others => '0'), (others => '0'), (others => '0'), (others => '0'), 
		(others => '0'), (others => '0'), (others => '0'), (others => '0'), (others => '0'), 
		(others => '0'), (others => '0'), (others => '0'), (others => '0'), (others => '0'), 
		(others => '0'), (others => '0'), (others => '0'), (others => '0'), (others => '0'), 
		(others => '0'), (others => '0'), (others => '0'), (others => '0'), (others => '0'), 
		(others => '0'), (others => '0')
	);

	begin

		process(clk)
			begin
				if rising_edge(clk) and wrEn = '0' then
					rdDataA <= regMem(to_integer(unsigned(rdAddrA)));
					rdDataB <= regMem(to_integer(unsigned(rdAddrB)));
				end if;
				if falling_edge(clk) and wrEn = '1' then
					regMem(to_integer(unsigned(wrAddr))) <= wrData;
				end if;
		end process;
end behav;